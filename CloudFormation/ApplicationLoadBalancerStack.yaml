---
AWSTemplateFormatVersion: 2010-09-09
Description: Application load balancer template laboration

Parameters:
  ALBSecGrpName:
    Description: "Set app load balancer name"
    Type: String
    Default: ALBSecGrp

Resources: 

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Ref ALBSecGrpName 
      GroupDescription: "Open port 80 HTTPS for load balancer"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
  
  AutoScalingSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: AutoScalingSecurityGroup 
      GroupDescription: "Open HTTPS from load balancer security group"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId:
            !GetAtt LoadBalancerSecurityGroup.GroupId
  
  EFSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: EFSSecurityGroup 
      GroupDescription: "Open access to ESF for Autoscaling group"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 2049
          ToPort: 2049
          SourceSecurityGroupId:
            !GetAtt AutoScalingSecurityGroup.GroupId
        - IpProtocol: tcp
          FromPort: 2049
          ToPort: 2049
          SourceSecurityGroupId:
            !GetAtt ProvisionSecurityGroup.GroupId

  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: RDSSecurityGroup 
      GroupDescription: "Open access to RDS for Autoscaling group and Provisioning VM"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId:
            !GetAtt AutoScalingSecurityGroup.GroupId
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId:
            !GetAtt ProvisionSecurityGroup.GroupId

  ProvisionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: ProvisionSecurityGroup 
      GroupDescription: "Open SSH access to Provisioning VM on port 22"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0

  AutoScalingTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /health-check
      HealthCheckProtocol: HTTP
      Port: 80
      Protocol: HTTP
      TargetType: instance
      VpcId: vpc-03a33e6a6982b9f67

  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties: 
      IpAddressType: ipv4
      Name: "WordpressLoadBalancer"
      Scheme: "internet-facing"
      SecurityGroups: 
        - !GetAtt LoadBalancerSecurityGroup.GroupId
      SubnetMappings:
        - SubnetId: subnet-074559faefce7f792
        - SubnetId: subnet-050c3cc7e37d58444
        - SubnetId: subnet-026b8575fca0c965a

  ApplicationLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref AutoScalingTargetGroup
  
  ProvisioningVM:
      Type: AWS::EC2::Instance
      DependsOn:
        - RDS
        - AutoscalingMountTarget1
        - AutoscalingMountTarget2
        - AutoscalingMountTarget3
      Properties:
        KeyName: DemoKey
        ImageId: ami-04f1014c8adcfa670
        InstanceType: t2.micro
        SecurityGroupIds:
          - !GetAtt ProvisionSecurityGroup.GroupId
        UserData: 
          Fn::Base64: !Sub |
            #!/bin/bash -ex
            dnf update -y
            dnf install -y wget
            dnf install -y mariadb105-server

            dnf install -y php-mysqlnd php-fpm php-mysqli php-json php php-devel php-gd
            
            mount -t efs -o tls ${EFS}:/ /var/www/html

            USER="admin"
            PASSWORD="qwerty123"
            DATABASE="wordpressDB

            mysql -u root <<EOF
            CREATE USER '$USER'@'localhost' IDENTIFIED BY '$PASSWORD';
            CREATE DATABASE \`$DATABASE\`;
            GRANT ALL PRIVILEGES ON \`$DATABASE\`.* TO "$USER"@"localhost";
            FLUSH PRIVILEGES;
            EOF

            sed -i 's/$DATABASE/wordpress-db/g' wordpress/wp-config.php
            sed -i 's/$USER/wordpress-user/g' wordpress/wp-config.php
            sed -i 's/$PASSWORD/g' wordpress/wp-config.php

            chown -R apache /var/www
            chgrp -R apache /var/www
            chmod 2775 /var/www
            find /var/www -type d -exec sudo chmod 2775 {} \;
            find /var/www -type f -exec sudo chmod 0644 {} \;

            wget https://wordpress.org/latest.tar.gz
            tar -xzf latest.tar.gz
            cp -r wordpress/* /var/www/html/

            wget https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar -O /tmp/wp-cli.phar 
            chmod +x /tmp/wp-cli.phar 
            /tmp/wp-cli.phar config create --dbname=wordpressDB --dbuser=admin --dbpass=qwerty123 --path=/var/www/html --dbhost=!GetAtt RDS.Endpoint.Address

            DNS=!GettAtt RDS.DNSName
            /tmp/wp-cli.phar core install --url=$DNS --title=Example --admin_user=admin --admin_password=qwerty123 --admin_email=info@example.com --path=/var/www/html

  LaunchTemplate:
    Type: 'AWS::EC2::LaunchTemplate'
    Properties:
      LaunchTemplateName: template-for-asg
      LaunchTemplateData:
        KeyName: DemoKey
        SecurityGroupIds:
          - !GetAtt AutoScalingSecurityGroup.GroupId
        ImageId: ami-04f1014c8adcfa670
        InstanceType: t2.micro
        UserData:
          Fn::Base64: !Sub  |
            #!/bin/bash
            dnf update -y
            dnf install -y httpd wget php-fpm php-mysqli php-json php php-devel
            systemctl start httpd
            systemctl enable httpd
            usermod -a -G apache ec2-user
            chown -R ec2-user:apache /var/www
            chmod 2775 /var/www && find /var/www -type d -exec sudo chmod 2775 {} \;
            find /var/www -type f -exec sudo chmod 0664 {} \;
            yum install -y amazon-efs-utils
            mount -t efs -o tls ${EFS}:/ /var/www/html

  AutoScalingGrp:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn: 
      - RDS
      - EFS
    Properties: 
      AutoScalingGroupName: "AutoScalingGrp"
      AvailabilityZones: 
        - eu-west-1a
        - eu-west-1b
        - eu-west-1c
      CapacityRebalance: true
      DefaultInstanceWarmup: 30
      DesiredCapacity: "2"
      HealthCheckGracePeriod: 30
      LaunchTemplate: 
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      TargetGroupARNs: 
        - !GetAtt AutoScalingTargetGroup.TargetGroupArn
      MaxSize: "4"
      MinSize: "1"
      NewInstancesProtectedFromScaleIn: true
      
  EFS:
    Type: AWS::EFS::FileSystem
    Properties: 
      Encrypted: true
      PerformanceMode: generalPurpose

  AutoscalingMountTarget1:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref EFS
      SubnetId: subnet-074559faefce7f792
      SecurityGroups:
        - !GetAtt EFSSecurityGroup.GroupId
  
  AutoscalingMountTarget2:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref EFS
      SubnetId: subnet-050c3cc7e37d58444
      SecurityGroups:
        - !GetAtt EFSSecurityGroup.GroupId
  
  AutoscalingMountTarget3:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref EFS
      SubnetId: subnet-026b8575fca0c965a
      SecurityGroups:
        - !GetAtt EFSSecurityGroup.GroupId
  
  EFSAccessPoint:
    Type: AWS::EFS::AccessPoint
    Properties:
      FileSystemId: !Ref EFS
      RootDirectory: 
        path: /var/www/html

  RDS:
    Type: AWS::RDS::DBInstance
    Properties: 
      AllocatedStorage: 20
      DBName: wordpressDB
      Endpoint: 
        Port: 3306
      Engine: mariadb
      EngineVersion: "10.6.10"
      DBInstanceClass: db.t2.micro
      MasterUsername: admin
      MasterUserPassword: qwerty123
      VPCSecurityGroups: 
        - !GetAtt RDSSecurityGroup.GroupId

      # TODO Create 'EFS' and RDS resources, Installing LAMP, look into wordpress tutorial
      # install php on EFS
      # /temp bra att anvÃ¤nda vid automation,
